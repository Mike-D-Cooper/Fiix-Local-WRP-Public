@page "/Admin/TenantDetails"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Tenant Details</PageTitle>



<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
        <h3>Tenant Details</h3>
        <EditForm Model="@tenantModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.AppKey" class="form-control" id="appKey" placeholder="App Key" />
                <label for="appKey">App Key</label>
                <ValidationMessage For="@(() => tenantModel.AppKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.AccessKey" class="form-control" id="accessKey" placeholder="Access Key" />
                <label for="accessKey">Access Key</label>
                <ValidationMessage For="@(() => tenantModel.AccessKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.SecretKey" class="form-control" id="secretKey" placeholder="Secret Key" type="password" />
                <label for="secretKey">Secret Key</label>
                <ValidationMessage For="@(() => tenantModel.SecretKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.TenantName" class="form-control" id="tenantName" placeholder="Tenant Name" />
                <label for="tenantName">Tenant Name</label>
                <ValidationMessage For="@(() => tenantModel.TenantName)" class="text-danger" />
            </div>

            <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary w-100">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private TenantModel tenantModel = new();

    private async Task HandleValidSubmit()
    {
        var FiixAPI = new CallFiixApi();
        FiixAPI.AppKey = tenantModel.AppKey;
        FiixAPI.AccessKey = tenantModel.AccessKey;
        FiixAPI.Secret = tenantModel.SecretKey;
        FiixAPI.BaseUrl = "https://" + tenantModel.TenantName + ".macmms.com";
        if (await FiixAPI.PingTenant())
        {
            await JS.InvokeVoidAsync("alert", "Successful connection to the API!! ");
            _db.TenantDetails.RemoveRange(_db.TenantDetails.ToList());
            _db.TenantDetails.Add(new Data.TenantDetail
            {
                AppKey = tenantModel.AppKey,
                AccessKey = tenantModel.AccessKey,
                SecretKey = tenantModel.SecretKey,
                TenantName = tenantModel.TenantName

            });
            _db.SaveChanges();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error connecting to the API, check your keys, their expiry dates and your firewall rules.");
        }
    }

    public class TenantModel
    {
        [Required(ErrorMessage = "App Key is required")]
        public string AppKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Access Key is required")]
        public string AccessKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Secret Key is required")]
        public string SecretKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Tenant Name is required")]
        public string TenantName { get; set; } = string.Empty;
    }
}