@page "/Admin/TenantDetails"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Tenant Details</PageTitle>



<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
        <h3>Tenant Details</h3>
        <EditForm Model="@tenantModel" OnValidSubmit="@HandleValidSubmit" autocomplete="off">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.AppKey" class="form-control" id="appKey" placeholder="App Key" autocomplete="off" />
                <label for="appKey">App Key</label>
                <ValidationMessage For="@(() => tenantModel.AppKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.AccessKey" class="form-control" id="accessKey" placeholder="Access Key" autocomplete="off" />
                <label for="accessKey">Access Key</label>
                <ValidationMessage For="@(() => tenantModel.AccessKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.SecretKey" class="form-control" id="secretKey" placeholder="Secret Key" type="password" autocomplete="off" />
                <label for="secretKey">Secret Key</label>
                <ValidationMessage For="@(() => tenantModel.SecretKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.TenantName" class="form-control" id="tenantName" placeholder="Tenant Name" autocomplete="off" />
                <label for="tenantName">Tenant Name</label>
                <ValidationMessage For="@(() => tenantModel.TenantName)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="siteDropdown" class="form-label">Limit to Site</label>
                <select class="form-select" id="siteDropdown" @bind="tenantModel.LimitToSite">
                    <option value="-1">-- Enable All Sites --</option>
                    @foreach (var site in Sites)
                    {
                        <option value="@site.Id">@site.Name (@site.Code)</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="languageSelect" class="form-label">Select Default Language</label>
                <select class="form-select" id="languageSelect" @bind="tenantModel.SelectedLanguage">
                    <option value="">-- Select Language --</option>
                    @foreach (var lang in AzureTranslatorLanguages.SupportedLanguages)
                    {
                        <option value="@lang.Key">@lang.Value</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="timezoneDropdown" class="form-label">Time Zone</label>
                <select class="form-select" id="timezoneDropdown" @bind="tenantModel.TimeZoneId">
                    <option value="">-- Select a Time Zone --</option>
                    @foreach (var tz in TimeZones)
                    {
                        <option value="@tz.Id">@tz.DisplayName</option>
                    }
                </select>
                <ValidationMessage For="@(() => tenantModel.TimeZoneId)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.TranslatorKey" class="form-control" id="TranslatorKey" placeholder="Azure Translator Key" autocomplete="off" />
                <label for="TranslatorKey">Azure Translator Key</label>
                <ValidationMessage For="@(() => tenantModel.TranslatorKey)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="tenantModel.TranslatorRegion" class="form-control" id="TranslatorRegion" placeholder="Azure Translator Region" autocomplete="off" />
                <label for="TranslatorRegion">Azure Translator Region</label>
                <ValidationMessage For="@(() => tenantModel.TranslatorRegion)" class="text-danger" />
            </div>

            <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary w-100">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private TenantModel tenantModel = new();
    private CallFiixApi FiixAPI = new CallFiixApi();
    private List<Helpers.DatabaseCommon.SiteDetail> Sites = new List<Helpers.DatabaseCommon.SiteDetail>();
    private List<TimeZoneInfo> TimeZones = new();

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            TimeZones = TimeZoneInfo.GetSystemTimeZones().ToList();
            var currentDetails = _db.TenantDetails.FirstOrDefault();
            if (currentDetails != null)
            {
                tenantModel = new TenantModel
                {
                    AccessKey = currentDetails.AccessKey,
                    AppKey = currentDetails.AppKey,
                    SecretKey = currentDetails.SecretKey,
                    TenantName = currentDetails.TenantName,
                    TimeZoneId = currentDetails.TimeZoneId,
                    SelectedLanguage = currentDetails.Language,
                    TranslatorKey = currentDetails.AzureTranslatorKey,
                    TranslatorRegion = currentDetails.AzureTranslatorRegion

                };

                FiixAPI.AppKey = tenantModel.AppKey;
                FiixAPI.AccessKey = tenantModel.AccessKey;
                FiixAPI.Secret = tenantModel.SecretKey;
                FiixAPI.BaseUrl = "https://" + tenantModel.TenantName + ".macmms.com";

                Sites = await Helpers.DatabaseCommon.GetSiteList(FiixAPI);
                tenantModel.LimitToSite = currentDetails.LimitToSite;
                tenantModel.AccessKey = currentDetails.AccessKey;
                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {

        FiixAPI.AppKey = tenantModel.AppKey;
        FiixAPI.AccessKey = tenantModel.AccessKey;
        FiixAPI.Secret = tenantModel.SecretKey;
        FiixAPI.BaseUrl = "https://" + tenantModel.TenantName + ".macmms.com";
        if (await FiixAPI.PingTenant())
        {
            await JS.InvokeVoidAsync("alert", "Successful connection to the API!! ");
            _db.TenantDetails.RemoveRange(_db.TenantDetails.ToList());
            _db.TenantDetails.Add(new Data.TenantDetail
            {
                AppKey = tenantModel.AppKey,
                AccessKey = tenantModel.AccessKey,
                SecretKey = tenantModel.SecretKey,
                TenantName = tenantModel.TenantName,
                LimitToSite = tenantModel.LimitToSite == -1 ? null : tenantModel.LimitToSite,
                TimeZoneId = tenantModel.TimeZoneId,
                Language = tenantModel.SelectedLanguage,
                AzureTranslatorKey = tenantModel.TranslatorKey,
                AzureTranslatorRegion = tenantModel.TranslatorRegion
            });
            _db.SaveChanges();

            Sites = await Helpers.DatabaseCommon.GetSiteList(FiixAPI);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error connecting to the API, check your keys, their expiry dates and your firewall rules.");
        }
    }

    public class TenantModel
    {
        [Required(ErrorMessage = "App Key is required")]
        public string AppKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Access Key is required")]
        public string AccessKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Secret Key is required")]
        public string SecretKey { get; set; } = string.Empty;

        [Required(ErrorMessage = "Tenant Name is required")]
        public string TenantName { get; set; } = string.Empty;

        public long? LimitToSite { get; set; }

        public string TimeZoneId { get; set; }

        public string SelectedLanguage { get; set; }
        public string TranslatorKey { get; set; }
        public string TranslatorRegion { get; set; }
    }


}