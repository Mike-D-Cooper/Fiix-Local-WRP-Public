@page "/CreateNewRequest"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject AzureTranslatorServiceFactory TranslatorFactory

<PageTitle>New Request</PageTitle>

<div class="row mt-4">
    <div class="col-lg-3"></div>
    <div class="col-lg-6" style="background-color: #f2f2f2; border: 1px solid rgba(98,98,98,.12);">
        <h3 class="m-4">@UIText.NewWorkRequest</h3>
    </div>
</div>
<div class="row">
    <div class="col-lg-3"></div>
    <div class="col-lg-6" style="border: 1px solid rgba(98,98,98,.12);">
        <EditForm Model="newRequestModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-lg-8">
                    <div class="mb-3">
                        <label for="siteDropdown" class="form-label">@UIText.SelectSite</label>
                        <select class="form-select" id="siteDropdown" @bind="newRequestModel.SiteId">
                            <option value="">-- @UIText.SelectSite --</option>
                            @foreach (var site in Sites)
                            {
                                <option value="@site.Id">@site.Name (@site.Code)</option>
                            }
                        </select>
                    </div>
                </div>
                @if (!newRequestModel.SiteId.HasValue)
                {
                    <div class="col-lg-4 ">
                        <div class="mb-3 text-lg-end">
                            <label class="form-label">@UIText.ScanAssetQRCode</label>
                            <div id="qr-reader" style="width: 300px"></div>
                            <button type="button" class="btn btn-outline-secondary w-100" @onclick="StartQrScan">@UIText.ScanAssetQRCode - <i class="fa-solid fa-camera-retro"></i></button>
                        </div>
                    </div>
                }
                
            </div>
            @if (newRequestModel.SiteId.HasValue)
            {
                @if (newRequestModel.SelectedAssetPoint != null)
                {
                    <div class="mb-3">
                        <label for="kindDropdown" class="form-label">@UIText.SelectAssetCategory</label>
                        <select class="form-select" id="kindDropdown" value="@newRequestModel.Kind" @onchange="OnKindChanged" disabled>
                            <option value="2">@UIText.Equipment</option>
                            <option value="3">@UIText.Tools</option>
                        </select>
                    </div>

                    <div class="mt-2 alert alert-success p-2">
                        Selected: <strong>@newRequestModel.SelectedAssetPoint.strCode</strong> - @newRequestModel.SelectedAssetPoint.strName
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <label for="kindDropdown" class="form-label">@UIText.SelectAssetCategory</label>
                        <select class="form-select" id="kindDropdown" value="@newRequestModel.Kind" @onchange="OnKindChanged">
                            <option value="2">@UIText.Equipment</option>
                            <option value="3">@UIText.Tools</option>
                        </select>
                    </div>

                    <div class="mb-3 position-relative">
                        <label for="assetTypeahead" class="form-label">@UIText.FindAsset</label>
                        <input type="text"
                               class="form-control"
                               id="assetTypeahead"
                               placeholder="@UIText.TypeAssetCodeorDescription"
                               @bind="assetSearchText"
                               @bind:event="oninput"
                               autocomplete="off" />

                        @if (!string.IsNullOrWhiteSpace(assetSearchText) && filteredAssetPoints.Count > 0)
                        {
                            <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                                @foreach (var asset in filteredAssetPoints)
                                {
                                    <li class="list-group-item list-group-item-action"
                                        style="cursor:pointer"
                                        @onclick="() => SelectAssetPoint(asset)">
                                        <strong>@asset.strCode</strong> - @asset.strName
                                    </li>
                                }
                            </ul>
                        }
                        <ValidationMessage For="@(() => newRequestModel.SelectedAssetPoint)" class="text-danger" />
                    </div>
                }

                <div class="row">
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <label for="maintTypeDropdown" class="form-label">@UIText.SelectAMaintenanceType</label>
                            <select class="form-select" id="maintTypeDropdown" @bind="newRequestModel.MaintTypeId">
                                @foreach (var each in MaintTypes)
                                {
                                    <option value="@each.id">@each.strName</option>
                                }

                            </select>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <label for="priorityDropdown" class="form-label">@UIText.SelectAPriority</label>
                            <select class="form-select" id="priorityDropdown" @bind="newRequestModel.PriorityId">
                                @foreach (var each in Priorities)
                                {
                                    <option value="@each.id">@each.strName</option>
                                }

                            </select>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">@UIText.Description</label>
                    <textarea class="form-control" id="description" rows="4" placeholder="@UIText.EnterWorkRequestDescription" @bind="newRequestModel.Description"></textarea>
                    <ValidationMessage For="@(() => newRequestModel.Description)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="imageUpload" class="form-label">@UIText.UploadImages</label>
                    <InputFile id="imageUpload" OnChange="OnImagesSelected" multiple accept="image/*" class="form-control" />
                </div>

                @if (UploadedImages.Count > 0)
                {
                    <div id="imageCarousel" class="carousel slide mb-3" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < UploadedImages.Count; i++)
                            {
                                <button type="button"
                                        data-bs-target="#imageCarousel"
                                        data-bs-slide-to="@i"
                                        class="@(i == 0 ? "active" : "")"
                                        aria-current="@(i == 0 ? "true" : "false")"
                                        aria-label="Slide @(i + 1)">
                                </button>
                            }
                        </div>
                        <div class="carousel-inner">
                            @for (int i = 0; i < UploadedImages.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@UploadedImages[i]" class="d-block w-100" alt="Uploaded Image @(i + 1)" style="max-height:400px;object-fit:contain;" />
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev" style="filter: invert(100%);">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next" style="filter: invert(100%);">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100">@UIText.Submit</button>
            }

        </EditForm>
    </div>
</div>

@if (IsSubmitting)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
         style="background:rgba(255,255,255,0.6);z-index:2000;">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Uploading content and creating work order...</span>
        </div>
    </div>
}

@code {
    private AzureTranslatorService Translator;
    public CallFiixApi FiixAPI = new CallFiixApi();
    public Local_WRP.Data.UserDetail UserInfo = new();
    private List<Helpers.DatabaseCommon.SiteDetail> Sites = new List<Helpers.DatabaseCommon.SiteDetail>();
    private NewRequestModel newRequestModel = new NewRequestModel();
    private List<APIModels.Assets.FindRequestResults.Point> AssetPoints = new();
    private List<APIModels.MaintenanceType.FindRequestResults.Point> MaintTypes = new();
    private List<APIModels.Priority.FindRequestResults.Point> Priorities = new();
    private APIModels.User.FindRequestResults.Point GuestUser = new APIModels.User.FindRequestResults.Point();

    private List<string> UploadedImages = new();
    private List<IBrowserFile> SelectedFiles = new();
    private bool IsSubmitting = false;

    private string assetSearchText = "";

    private List<APIModels.Assets.FindRequestResults.Point> filteredAssetPoints =>
        string.IsNullOrWhiteSpace(assetSearchText)
            ? new List<APIModels.Assets.FindRequestResults.Point>()
            : AssetPoints
                .Where(x => !string.IsNullOrEmpty(x.strCode) && x.strCode.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase) ||
                            !string.IsNullOrEmpty(x.strDescription) && x.strDescription.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase) ||
                            !string.IsNullOrEmpty(x.strName) && x.strName.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase))
                .Take(10)
                .ToList();

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            Translator = await TranslatorFactory.CreateAsync();
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userName", out var userName))
            {
                newRequestModel.OnSiteIdChanged = async (siteId) => await OnSiteIdChanged(siteId);
                Helpers.DatabaseCommon.GetAPICreds(_db, FiixAPI);
                Sites = await Helpers.DatabaseCommon.GetSiteList(FiixAPI);
                await GetAssets();
                await GetMaintTypes();
                await GetPriorities();
                await GetWorkOrderStatus();
                await GetGuestUser();

                string UserName = userName;
                UserInfo = _db.UserDetails.FirstOrDefault(x => x.Name.ToUpper() == UserName.ToUpper());
                UIText = await Translator.TranslateUIElements<ElementText>(UIText, UserInfo.Language);

                var LimitToSite = Helpers.DatabaseCommon.CheckIfSitesAreLimited(_db);
                if (LimitToSite.HasValue)
                {
                    Sites = Sites.Where(x => x.Id == LimitToSite.Value).ToList();
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Missing username, try again.");
                Navigation.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        await CreateNewWorkOrder();

        // Use SelectedSiteId as needed
        await JS.InvokeVoidAsync("alert", UIText.ThankYouComeAgain);
        Navigation.NavigateTo("/Requests?userName=" + UserInfo.Name);
        IsSubmitting = false;
    }

    private async Task CreateNewWorkOrder()
    {
        var request = new APIModels.WorkOrder.AddRequest();
        request.Pnt = new APIModels.WorkOrder.AddRequest.Point
        {
            intMaintenanceTypeID = newRequestModel.MaintTypeId.Value,
            intPriorityID = newRequestModel.PriorityId.Value,
            intSiteID = newRequestModel.SelectedAssetPoint.intSiteID,
            intWorkOrderStatusID = newRequestModel.WOStatusId.Value,
            strDescription = await TranslateWODescription(),
            intRequestedByUserID = GuestUser.id,
            strNameUserGuest = UserInfo.Name
        };

        string test = JsonSerializer.Serialize(request);

        var responce = await FiixAPI.GetServerResponce<APIModels.WorkOrder.AddRequestResults>(request);
        if (responce != null)
        {
            await AddAssetToWorkOrder(responce.Points.id, newRequestModel.SelectedAssetPoint);
            await AddImagesToWorkOrder(responce.Points.id);

            _db.UserWorkOrders.Add(new Data.UserWorkOrders
            {
                CreatedDate = DateTime.UtcNow,
                UserId = UserInfo.Id,
                WorkOrderId = responce.Points.id
            });

            _db.SaveChanges();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", UIText.CouldNotCreateWorkOrder);
        }
    }

    private async Task<string> TranslateWODescription()
    {
        var tenantInfo = _db.TenantDetails.FirstOrDefault();
        if(tenantInfo!= null && tenantInfo.Language != UserInfo.Language)
        {
            return await Translator.TranslateAsync(newRequestModel.Description, tenantInfo.Language);
        }
        return newRequestModel.Description;
    }

    private async Task AddAssetToWorkOrder(long WorkorderId, APIModels.Assets.FindRequestResults.Point Asset)
    {
        var request = new APIModels.WorkOrderAsset.AddRequest();
        request.Pnt = new APIModels.WorkOrderAsset.AddRequest.Point
        {
            intAssetID = Asset.id,
            intWorkOrderID = WorkorderId
        };

        string responce = await FiixAPI.GetServerResponce(JsonSerializer.Serialize(request));

        if (responce.Contains("error"))
        {
            await JS.InvokeVoidAsync("alert", responce);
        }
    }

    private async Task AddImagesToWorkOrder(long workOrderId)
    {
        foreach (var file in SelectedFiles)
        {
            // Prepare file description
            var fileDesc = new CallFiixApi.FileUploadDescription
            {
                sourceInfo = "WORK_ORDER_INFO",
                sourceIdString = workOrderId.ToString(),
                fieldName = "file1"
            };

            // Prepare file stream content
            var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var streamContent = new StreamContent(stream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            // Call the upload method
            await FiixAPI.PostFileUpload(
                file.Name,
                new List<CallFiixApi.FileUploadDescription> { fileDesc },
                streamContent,
                file.ContentType
            );
        }
    }

    private void SelectAssetPoint(APIModels.Assets.FindRequestResults.Point asset)
    {
        newRequestModel.SelectedAssetPoint = asset;
        assetSearchText = asset.strCode;
    }

    private async Task OnSiteIdChanged(long? siteId)
    {
        if (siteId == null)
        {
            AssetPoints = new();
        }
        else
        {
            await GetAssets();
        }
    }

    private async Task OnKindChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value.ToString(), out int kind))
        {
            newRequestModel.Kind = kind;
            await GetAssets();
        }
    }

    private async Task GetAssets()
    {
        AssetPoints = new();

        var request = new APIModels.Assets.FindRequestWithFilter();
        if (newRequestModel.SiteId.HasValue)
        {
            request.filters.Add(new APIModels.Assets.FindRequestWithFilter.Filter
            {
                ql = "intKind = ? and intSiteID = ?",
                parameters = new List<long> { newRequestModel.Kind, newRequestModel.SiteId.Value } // Fix: Initialize the List<int> directly instead of using an array.
            });
        }
        else
        {
            request.filters.Add(new APIModels.Assets.FindRequestWithFilter.Filter
            {
                ql = "intKind = ?",
                parameters = new List<long> { newRequestModel.Kind } // Fix: Initialize the List<int> directly instead of using an array.
            });
        }

        var responce = await FiixAPI.GetServerResponce<APIModels.Assets.FindRequestResults>(request);
        if (responce != null)
        {
            AssetPoints = responce.Points.OrderBy(x => x.strCode).ToList();
        }
    }

    private async Task GetMaintTypes()
    {
        var request = new APIModels.General.FindRequest();
        request.className = "MaintenanceType";

        var responce = await FiixAPI.GetServerResponce<APIModels.MaintenanceType.FindRequestResults>(request);

        if (responce != null)
        {
            MaintTypes = responce.Points.OrderBy(x => x.strName).ToList();
            newRequestModel.MaintTypeId = MaintTypes.FirstOrDefault().id;
        }
    }

    private async Task GetPriorities()
    {
        var request = new APIModels.General.FindRequest();
        request.className = "Priority";

        var responce = await FiixAPI.GetServerResponce<APIModels.Priority.FindRequestResults>(request);

        if (responce != null)
        {
            Priorities = responce.Points.OrderByDescending(x => x.intOrder).ToList();
            newRequestModel.PriorityId = Priorities.FirstOrDefault().id;
        }
    }

    private async Task GetWorkOrderStatus()
    {
        var request = new APIModels.General.FindRequest();
        request.className = "WorkOrderStatus";

        var responce = await FiixAPI.GetServerResponce<APIModels.WOStatus.FindRequestResults>(request);

        if (responce != null)
        {
            var statusId = responce.Points.Where(x => x.strName.ToUpper().Contains("REQUESTED")).FirstOrDefault();

            if (statusId != null)
            {
                newRequestModel.WOStatusId = statusId.id;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error finding the workorder status 'Requested', please verify this status exists in the CMMS settings lookup tables.");
            }
        }
    }

    private async Task GetGuestUser()
    {
        var request = new APIModels.General.FindRequest();
        request.className = "User";

        var responce = await FiixAPI.GetServerResponce<APIModels.User.FindRequestResults>(request);

        if (responce != null)
        {
            var guestUser = responce.Points.Where(x => x.strFullName.ToUpper() == "GUEST").FirstOrDefault();

            if (guestUser != null)
            {
                GuestUser = guestUser;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error finding the user \"Guest\", please verify this user exists.");
            }
        }
    }

    private async Task OnImagesSelected(InputFileChangeEventArgs e)
    {
        UploadedImages.Clear();
        SelectedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            SelectedFiles.Add(file);

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit per image
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
            UploadedImages.Add(imageDataUrl);
        }
    }

    private async Task StartQrScan()
    {
        await JS.InvokeVoidAsync("qrScanner.start", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string code)
    {
        if (code.Contains("a="))
        {
            var splitUrl = code.Split("a=");
            if (splitUrl.Length == 2)
            {
                var selectedAsset = AssetPoints.FirstOrDefault(x => x.id.ToString() == splitUrl[1]);
                if (selectedAsset != null)
                {
                    SelectAssetPoint(selectedAsset);
                    newRequestModel.SiteId = selectedAsset.intSiteID;
                    newRequestModel.Kind = selectedAsset.intKind;
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", UIText.CouldNotFindQRCode + " -  " + code);
                }
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", UIText.CouldNotFindQRCode + " -  " + code);
        }

        StateHasChanged();
    }

    public class NewRequestModel
    {
        private long? _siteId;
        [Required(ErrorMessage = "Select a site")]
        public long? SiteId
        {
            get => _siteId;
            set
            {
                if (_siteId != value)
                {
                    _siteId = value;
                    OnSiteIdChanged?.Invoke(value);
                }
            }
        }

        public Action<long?> OnSiteIdChanged { get; set; }

        public int Kind { get; set; } = 2;
        [Required(ErrorMessage = "Please enter a description")]
        public string Description { get; set; }
        public long? MaintTypeId { get; set; }
        public long? PriorityId { get; set; }
        public long? WOStatusId { get; set; }
        [Required(ErrorMessage = "Please enter and select an asset")]
        public APIModels.Assets.FindRequestResults.Point SelectedAssetPoint { get; set; }
    }

    private ElementText UIText = new();
    public class ElementText
    {
        public string Closed { get; set; } = "Closed";
        public string CouldNotCreateWorkOrder { get; set; } = "Could not create the workorder, please check your selections and API keys";
        public string CouldNotFindQRCode { get; set; } = "I could not find that asset, please check your QR code.";
        public string Description { get; set; } = "Description";
        public string EnterWorkRequestDescription { get; set; } = "Enter work request description";
        public string Equipment { get; set; } = "Equipment";
        public string FindAsset { get; set; } = "Find Asset";
        public string NewWorkRequest { get; set; } = "New Work Request";
        public string SelectAssetCategory { get; set; } = "Select Asset Category";
        public string SelectAMaintenanceType { get; set; } = "Select a Maintenance Type";
        public string SelectAPriority { get; set; } = "Select a Priority";
        public string ScanAssetQRCode { get; set; } = "Scan Asset QR Code";
        public string SelectSite { get; set; } = "Select Site";
        public string Submit { get; set; } = "Submit";
        public string ThankYouComeAgain { get; set; } = "Thank you, come again!!";
        public string Tools { get; set; } = "Tools";
        public string TypeAssetCodeorDescription { get; set; } = "Type asset code or description";
        public string UploadImages { get; set; } = "Upload Images";
    }
}
