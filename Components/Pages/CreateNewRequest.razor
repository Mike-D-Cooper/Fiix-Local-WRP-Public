@page "/CreateNewRequest"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<div class="row mt-4">
    <div class="col-lg-3"></div>
    <div class="col-lg-6" style="background-color: #f2f2f2; border: 1px solid rgba(98,98,98,.12);">
        <h3 class="m-4">New Work Request </h3>
    </div>
</div>
<div class="row">
    <div class="col-lg-3"></div>
    <div class="col-lg-6" style="border: 1px solid rgba(98,98,98,.12);">
        <EditForm Model="newRequestModel" OnValidSubmit="HandleSubmit">
            <div class="mb-3">
                <label for="siteDropdown" class="form-label">Select Site</label>
                <select class="form-select" id="siteDropdown" value="-1"
                        @onchange="OnSiteIdChanged">
                    <option value="-1">-- Select a Site --</option>
                    @foreach (var site in Sites)
                    {
                        <option value="@site.Id">@site.Name (@site.Code)</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label for="kindDropdown" class="form-label">Select Asset Category</label>
                <select class="form-select" id="kindDropdown" value="@newRequestModel.Kind" @onchange="OnKindChanged">
                    <option value="2">Equipment</option>
                    <option value="3">Tools</option>
                </select>
            </div>            

            @if (selectedAssetPoint != null)
            {
                <div class="mt-2 alert alert-success p-2">
                    Selected: <strong>@selectedAssetPoint.strCode</strong> - @selectedAssetPoint.strDescription
                </div>
            }
            else
            {
                <div class="mb-3 position-relative">
                    <label for="assetTypeahead" class="form-label">Find Asset</label>
                    <input type="text"
                           class="form-control"
                           id="assetTypeahead"
                           placeholder="Type asset code or description"
                           @bind="assetSearchText"
                           @bind:event="oninput"
                           autocomplete="off" />

                    @if (!string.IsNullOrWhiteSpace(assetSearchText) && filteredAssetPoints.Count > 0)
                    {
                        <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                            @foreach (var asset in filteredAssetPoints)
                            {
                                <li class="list-group-item list-group-item-action"
                                    style="cursor:pointer"
                                    @onclick="() => SelectAssetPoint(asset)">
                                    <strong>@asset.strCode</strong> - @asset.strDescription
                                </li>
                            }
                        </ul>
                    }
                </div>
            }

            <div class="mb-3">
                <label for="maintTypeDropdown" class="form-label">Select a Maintenance Type</label>
                <select class="form-select" id="maintTypeDropdown" @bind="newRequestModel.MaintTypeId">
                    @foreach(var each in MaintTypes)
                    {
                        <option value="@each.id">@each.strName</option>
                    }

                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" rows="4" placeholder="Enter work request description"
                          @bind="newRequestModel.Description"></textarea>
                <ValidationMessage For="@(() => newRequestModel.Description)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="imageUpload" class="form-label">Upload Images</label>
                <InputFile id="imageUpload" OnChange="OnImagesSelected" multiple accept="image/*" class="form-control" />
            </div>

            @if (UploadedImages.Count > 0)
            {
                <div id="imageCarousel" class="carousel slide mb-3" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < UploadedImages.Count; i++)
                        {
                            <button type="button"
                                    data-bs-target="#imageCarousel"
                                    data-bs-slide-to="@i"
                                    class="@(i == 0 ? "active" : "")"
                                    aria-current="@(i == 0 ? "true" : "false")"
                                    aria-label="Slide @(i + 1)">
                            </button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @for (int i = 0; i < UploadedImages.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img src="@UploadedImages[i]" class="d-block w-100" alt="Uploaded Image @(i + 1)" style="max-height:400px;object-fit:contain;" />
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev" style="filter: invert(100%);">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next" style="filter: invert(100%);">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            }

            <button type="submit" class="btn btn-primary w-100">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    public CallFiixApi FiixAPI = new CallFiixApi();
    public string UserName { get; set; }
    private List<Helpers.DatabaseCommon.SiteDetail> Sites = new List<Helpers.DatabaseCommon.SiteDetail>();
    private NewRequestModel newRequestModel = new NewRequestModel();
    private List<APIModels.Assets.FindRequestResults.Point> AssetPoints = new();
    private List<APIModels.MaintenanceType.FindRequestResults.Point> MaintTypes = new();
    private List<string> UploadedImages = new();

    private string assetSearchText = "";
    private APIModels.Assets.FindRequestResults.Point? selectedAssetPoint;
    private List<APIModels.Assets.FindRequestResults.Point> filteredAssetPoints =>
        string.IsNullOrWhiteSpace(assetSearchText)
            ? new List<APIModels.Assets.FindRequestResults.Point>()
            : AssetPoints
                .Where(x => !string.IsNullOrEmpty(x.strCode) && x.strCode.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase) ||
                            !string.IsNullOrEmpty(x.strDescription) && x.strDescription.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase) ||
                            !string.IsNullOrEmpty(x.strName) && x.strName.Contains(assetSearchText, StringComparison.OrdinalIgnoreCase))
                .Take(10)
                .ToList();

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userName", out var userName))
            {
                Helpers.DatabaseCommon.GetAPICreds(_db, FiixAPI);
                Sites = await Helpers.DatabaseCommon.GetSiteList(FiixAPI);
                await GetAssets();
                await GetMaintTypes();

                var LimitToSite = Helpers.DatabaseCommon.CheckIfSitesAreLimited(_db);
                if (LimitToSite.HasValue)
                {
                    Sites = Sites.Where(x => x.Id == LimitToSite.Value).ToList();
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Missing username, try again.");
                Navigation.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        // Use SelectedSiteId as needed
        await JS.InvokeVoidAsync("alert", $"Thank you, come again!!");
        Navigation.NavigateTo("/");
    }

    private void SelectAssetPoint(APIModels.Assets.FindRequestResults.Point asset)
    {
        selectedAssetPoint = asset;
        assetSearchText = asset.strCode;
    }

    private async Task OnSiteIdChanged(ChangeEventArgs e)
    {

        if (long.TryParse(e.Value.ToString(), out long siteId))
        {
            newRequestModel.SiteId = siteId;
            await GetAssets();
        }
    }

    private async Task OnKindChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value.ToString(), out int kind))
        {
            newRequestModel.Kind = kind;
            await GetAssets();
        }
    }
   
    private async Task GetAssets()
    {
        AssetPoints = new();

        var request = new APIModels.Assets.FindRequestWithFilter();
        if(newRequestModel.SiteId != -1)
        {
            request.filters.Add(new APIModels.Assets.FindRequestWithFilter.Filter
            {
                ql = "intKind = ? and intSiteID = ?",
                parameters = new List<long> { newRequestModel.Kind, newRequestModel.SiteId } // Fix: Initialize the List<int> directly instead of using an array.
            });
        }
        else
        {
            request.filters.Add(new APIModels.Assets.FindRequestWithFilter.Filter
            {
                ql = "intKind = ?",
                parameters = new List<long> { newRequestModel.Kind } // Fix: Initialize the List<int> directly instead of using an array.
            });
        }

        var responce = await FiixAPI.GetServerResponce<APIModels.Assets.FindRequestResults>(request);
        if (responce != null)
        {
            AssetPoints = responce.Points.OrderBy(x => x.strCode).ToList();            
        }
    }

    private async Task GetMaintTypes()
    {
        var request = new APIModels.General.FindRequest();
        request.className = "MaintenanceType";

        var responce = await FiixAPI.GetServerResponce<APIModels.MaintenanceType.FindRequestResults>(request);

        if(responce!= null)
        {
            MaintTypes = responce.Points.OrderBy(x=> x.strName).ToList();
            newRequestModel.MaintTypeId = MaintTypes.FirstOrDefault().id;
        }

    }

    private async Task OnImagesSelected(InputFileChangeEventArgs e)
    {
        UploadedImages.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit per image
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
            UploadedImages.Add(imageDataUrl);
        }
    }

    public class NewRequestModel
    {
        [Required(ErrorMessage = "Select a site")]
        public long SiteId { get; set; } = -1;
        public int Kind { get; set; } = 2;
        [Required(ErrorMessage = "Please enter a description")]
        public string Description { get; set; }
        public long MaintTypeId { get; set; }
    }
}
